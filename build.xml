<project name="BytecodeOutline" default="plugin">

  <!-- defines the location of the asm project via asm.project.dir -->
  <property file="${user.home}/asm-build.properties"/>

  <property file="build.properties"/>

  <!-- defines product.version from asm etc  -->
  <property file="${asm.project.dir}/build.properties" />


  <property name="src"                value="${basedir}/src"/>
  <property name="externals"          value="${basedir}/externals"/>
  <property name="out"                value="${basedir}/output"/>
  <property name="lib"                value="${basedir}/lib"/>
  <property name="out.build"          value="${out}/build"/>

  	<tstamp><format property="plugin.date" pattern="yyyyMMddHHmm" /></tstamp>
	
	<target name="get-git-revision">
	<exec executable="git" spawn="false" outputproperty="git.revision">
	        <arg value="log"/>
	        <arg value="--pretty=format:%h"/>
	        <arg value="-n"/>
	        <arg value="1"/>
	</exec>
	    <echo>Got git revision ${git.revision}</echo>
	</target>
	
  <target name="init" depends="getasm,get-git-revision">
    <property name="plugin.qualifier" value="${plugin.date}-${git.revision}" />
    <!-- read plugin base version from META-INF/MANIFEST.MF to ${pluginVersion} -->
    <loadfile srcFile="${basedir}/META-INF/MANIFEST.MF" property="plugin.version">
      <filterchain>
          <tokenfilter>
          	<containsregex pattern="Bundle-Version: (.*)" replace="\1"/>
          </tokenfilter>
          <tokenfilter>
          	<replacestring from="qualifier" to="${plugin.qualifier}"/>
          </tokenfilter>
          <deletecharacters chars=" \n\r"/>
      </filterchain>
    </loadfile>

    <!-- read plugin id from META-INF/MANIFEST.MF to ${pluginId} -->
    <loadfile srcFile="${basedir}/META-INF/MANIFEST.MF" property="plugin.id">
      <filterchain>
          <tokenfilter><containsregex pattern="Bundle-SymbolicName:\s*([^;]+)(;.*)?" replace="\1"/></tokenfilter>
          <deletecharacters chars=" \n\r"/>
      </filterchain>
    </loadfile>
    <property name="plugin.jar"   value="${plugin.id}_${plugin.version}.jar"/>
    <property name="feature.jar"  value="${plugin.id}.feature_${plugin.version}.jar"/>
  </target>

    <scriptdef name="getAndCheckLibrary" language="javascript">
        <attribute name="url"/>
        <attribute name="path"/>
        <![CDATA[
           var URL = Java.type("java.net.URL");
           var File = Java.type("java.io.File");

           var path = attributes.get("path");
           var url = attributes.get("url");
           print(path + " / " + url);

           var file = new File(path);

           result = false;
           if(file.exists()){
               print("File exists.")
               result = true;
           }
           if(result == false){
               print("Downloading file...")
               get = project.createTask("get");
               get.setSrc(new URL(url));
               get.setDest(file)
               get.perform();
           }
        ]]>
    </scriptdef>

    <target name="getasm" >
    	<property name="asmRoot" value="http://download.eclipse.org/tools/orbit/downloads/drops2/R20181128170323/repository/plugins" />
    	<property name="asmVersion" value="7.0.0.v20181030-2244" />
    	<mkdir dir="${lib}"/>
        <getAndCheckLibrary
            url="${asmRoot}/org.objectweb.asm_${asmVersion}.jar"
            path="${lib}/asm-${asmVersion}.jar"
        />
        <getAndCheckLibrary
            url="${asmRoot}/org.objectweb.asm.analysis_${asmVersion}.jar"
            path="${lib}/asm-analysis-${asmVersion}.jar"
        />
        <getAndCheckLibrary
            url="${asmRoot}/org.objectweb.asm.commons_${asmVersion}.jar"
            path="${lib}/asm-commons-${asmVersion}.jar"
        />
        <getAndCheckLibrary
            url="${asmRoot}/org.objectweb.asm.tree_${asmVersion}.jar"
            path="${lib}/asm-tree-${asmVersion}.jar"
        />
        <getAndCheckLibrary
            url="${asmRoot}/org.objectweb.asm.util_${asmVersion}.jar"
            path="${lib}/asm-util-${asmVersion}.jar"
        />
    </target>


  <target name="compile" depends="init">
    <path id="classpath">
      <fileset dir="lib" includes="*.jar"/>
      <fileset dir="${eclipse.home}" includes="plugins/**/*.jar"/>
    </path>
    <mkdir dir="${out.build}"/>
    <javac destdir="${out.build}" debug="on" source="1.8" target="1.8" includeantruntime="false">
      <classpath refid="classpath"/>
      <src path="${src}"/>
      <include name="**/*.java"/>
    </javac>
  </target>

  <target name="jars" depends="compile">
    <copy todir="${out.build}" overwrite="true">
      <fileset dir="${src}">
        <include name="**/*.properties"/>
      </fileset>
    </copy>
  	
    <!-- set the values for plugin.version -->
  	<filterset id="version.filter">
        <filter token="PLUGIN_VERSION" value="${plugin.version}" />
        <filter token="FEATURE_VERSION" value="${plugin.version}" />
    </filterset>
  	
    <echo>plugin qualifier  ${plugin.qualifier}</echo>
    <echo>plugin version  ${plugin.version}</echo>
    <!-- Copy META-INF/MANIFEST.MF to ${out.dir}, "qualifier" to current version -->
    <copy file="META-INF/MANIFEST.MF" toFile="${out.build}/META-INF/MANIFEST.MF" overwrite="true">
      <filterset begintoken="q" endtoken="r"><filter token="ualifie" value="${plugin.qualifier}"/></filterset>
    </copy>
  	
  	<mkdir dir="${out}/site"/>
    <copy todir="${out}/site" overwrite="true">
      <fileset dir="${basedir}/site">
        <include name="**/*.xml"/>
      </fileset>
      <filterset refid="version.filter"/>
    </copy>

    <zip zipfile="${out}/BytecodeOutlinesrc.zip">
      <zipfileset dir="${src}" includes="**/*" prefix="src"/>
      <fileset dir=".">
        <include name="icons/*"/>
        <include name="plugin.xml"/>
        <include name="build.properties"/>
        <include name="META-INF/*"/>
        <include name="build.xml"/>
        <include name="build.config"/>
        <include name=".project"/>
        <include name=".classpath"/>
        <include name="README.txt"/>
        <include name="LICENSE.txt"/>
      </fileset>
      <fileset dir="${out}/site">
        <include name="feature.xml"/>
        <include name="site.xml"/>
      </fileset>

    </zip>
  </target>

  <target name="plugin" depends="jars">
    <zip zipfile="${out}/site/plugins/${plugin.jar}">
      <zipfileset dir="${out}" includes="BytecodeOutlinesrc.zip"/>
      <fileset dir=".">
        <include name="icons/**/*"/>
        <include name="plugin.xml"/>
        <include name="about.html"/>
        <include name="about.ini"/>
        <include name="about.properties"/>
        <include name="about32.png"/>
        <include name="*.txt"/>
      </fileset>
      <fileset dir="${out.build}">
        <include name="**/*"/>
      </fileset>
    </zip>
  </target>

  <target name="feature" depends="plugin">
    <zip zipfile="${out}/site/features/${feature.jar}">
      <fileset dir="${out}/site" includes="feature.xml"/>
    </zip>
  </target>

  <target name="site" depends="cleanOutput,feature">
    <zip zipfile="${out}/${plugin.id}.update_${plugin.version}.zip">
      <zipfileset dir="${out}/site" includes="site.xml"/>
      <zipfileset dir="${out}/site/features" includes="${feature.jar}" prefix="features"/>
      <zipfileset dir="${out}/site/plugins" includes="${plugin.jar}"  prefix="plugins"/>
    </zip>
  </target>

  <target name="clean">
    <delete failonerror="false" includeEmptyDirs="true">
      <fileset dir="${out}" includes="**/*"/>
      <fileset dir="${lib}" includes="**/*"/>
    </delete>
  </target>
	
  <target name="cleanOutput">
    <delete failonerror="false" includeEmptyDirs="true">
      <fileset dir="${out}" includes="**/*"/>
    </delete>
  </target>

</project>
